====================
AST
====================

In .attic/ast folder i put ast repo that uses Mam build system. Make a detail understanding of it's functionallity and usage.

I want to implement the same build system for current motif source.
Create a separate branch for migration.
Convert autoconf/automake build system to Mamfile and Makefile (already there after automake usage).
Take into account the wide usage of bison/flex generations.
Read build.log to deeply understand the build procedure.

Change all Makefiles to be clean, readable (script organization and human readable naming for internals), maintainable and without all of this automake/autoconf and empty crap.
Change one-by-one to test that code still compiles.

All *MsgCatI.h (UilMsgCatI.h, MwmMsgCatI.h, MrmMsgCatI.h, XmMsgCatI.h) files created using mkmsgcat:
mkmsgcat -Xm /proj/motif/lib/Xm/Messages.c where -Xm is a prefix (Uil, Mwm, Mrm, Xm).
Files:
lib/Mrm/MrmMessages.c


Take into account:
- in clients/uil:
UilParser.lo: UilParser.c
	$(LTCOMPILE) -DCALLABLE -c UilParser.c

UilParser.c:
	test -f UilParser.c || $(LN_S) $(srcdir)/UilMain.c UilParser.c

UilLexPars.c: $(top_builddir)/tools/wml/Uil.c
	test -f UilLexPars.c || $(LN_S) $(top_builddir)/tools/wml/Uil.c UilLexPars.c

UilDBDef.h:
	$(LN_S) $(srcdir)/../../tools/wml/UilDBDef.h UilDBDef.h

if XM_MSGCAT
$(COMMON_SRC): $(CAT_FILES)

CAT_FILES = Uil.cat UilMsgCatI.h

$(CAT_FILES): Uil.msg
	$(mkinstalldirs) $(top_builddir)/localized/C/msg
	$(top_builddir)/localized/util/mkcatdefs UilMsgCatI.h $(srcdir)/Uil.msg >$(top_builddir)/localized/C/msg/Uil.msg
	gencat Uil.cat $(top_builddir)/localized/C/msg/Uil.msg
endif

- in tools/wml
wmllex.c: wmllex.l
	@echo "Generating wmllex.c from wmllex.l"
	@if command -v flex >/dev/null 2>&1; then \
		flex $(LFLAGS) -o wmllex.c $(srcdir)/wmllex.l; \
	else \
		$(LEX) $(LFLAGS) $(srcdir)/wmllex.l; \
		if test -f lex.yy.c; then mv lex.yy.c wmllex.c; \
		elif test -f lexyy.c; then mv lexyy.c wmllex.c; \
		else echo "Error: No lexer output file found"; exit 1; fi; \
	fi
	@echo "Adding feature test macros to wmllex.c"
	@sed -i '1i#include <stdio.h>\n#include <unistd.h>' wmllex.c

wmluiltok.c: wmluiltok.l
	@echo "Generating wmluiltok.c from wmluiltok.l"
	@if command -v flex >/dev/null 2>&1; then \
		flex $(LFLAGS) -o wmluiltok.c $(srcdir)/wmluiltok.l; \
	else \
		$(LEX) $(LFLAGS) $(srcdir)/wmluiltok.l; \
		if test -f lex.yy.c; then mv lex.yy.c wmluiltok.c; \
		elif test -f lexyy.c; then mv lexyy.c wmluiltok.c; \
		else echo "Error: No lexer output file found for wmluiltok"; exit 1; fi; \
	fi
	@echo "Adding feature test macros to wmluiltok.c"
	@sed -i '1i#include <stdio.h>\n#include <unistd.h>' wmluiltok.c

wmlsynbld.c: wmlparse.h

$(srcdir)/wmldbcreate.c: $(WMLTARGETS) UilLexPars.h

UilLexPars.h: UilLexPars.c

UilLexPars.c: Uil.c
	$(LN_S) Uil.h UilLexPars.h
	$(LN_S) Uil.c UilLexPars.c

$(WMLTARGETS): wml-uil.mm

wml-uil.mm: wmluiltok wml UilLexPars.c $(TABLE)
	$(RM) $(WMLTARGETS) wml.report wml-uil.mm
	./wmluiltok <$(srcdir)/Uil.y >tokens.dat
	$(RM) wml-uil.mm
	./wml $(srcdir)/$(TABLE)
	$(RM) tokens.dat

====================
CMake
====================

Move motif.pc.in file into 'data' folder. Update paths.

Cleanup .gitignore: remove automake/autoconf stuff and any other outdated files and paths.

In data/bindings folder remove files for outdated or/and deprecated systems. CDE should alive.

In src/bin/uil investigate and separate Uil binary (stay in src/bin) from libuil. The libuil source move into src/lib/Uil.
In src/bin/wml move Uil* files and Uil.y to src/bin/uil (or src/bin/lib/Uil if files belong to libuil). Move src/bin/wml/fix_yystype.sh into tools/cmake/utils.
In src/bin/mwm move WmWsmLib to src/lib/Wsm.
In clients/uil move Uil.msg to localized/C/msg. Remove *.msg files from other source folders (ex., clients/uil/Uil.msg). They should be only in localized/C/msg.
Rename tools/cmake/utils to tools/cmake/scripts
Update all paths.

In include folder do we need sysytem_includes.h as we already have motif_system.h. Check and combine them in single motif_system.h. Update usage paths.

Do we still need this parts in code:
#ifdef REV_INFO
#ifndef lint
static char rcsid[] = "$TOG: wml.c /main/8 1999/04/16 09:41:47 mgreess $"
#endif
#endif

Is it possible to implement wml functionality simpler and efficiently?

Implement (if not already):
WITH_COMPILER_CODE_COVERAGE
WITH_COMPILER_CCACHE
WITH_NINJA_POOL_JOBS

Implement build with ninja. Do we need to generate build.ninja somewhere?

Separate CFLAGS (or CXXFLAGS) that switch ON from OFF (-Wno-...).

Is it favourable to convert all .c and .h files to .cc and .hh?
I wish to use constructions like:
    wmWindowM

Check do we really need this part in main CMakeLists.txt:
# -----------------------------------------------------------------------------
# Set policy

# see "cmake --help-policy CMP0003"
# So library linking is more sane
cmake_policy(SET CMP0003 NEW)

# So BUILDINFO and BLENDERPATH strings are automatically quoted
cmake_policy(SET CMP0005 NEW)

# So syntax problems are errors
cmake_policy(SET CMP0010 NEW)

# Input directories must have CMakeLists.txt
cmake_policy(SET CMP0014 NEW)

# Silence draco warning on macOS, new policy works fine.
if(POLICY CMP0068)
  cmake_policy(SET CMP0068 NEW)
endif()

# find_package() uses <PackageName>_ROOT variables.
if(POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW)
endif()

# find_package() uses uppercase <PackageName>_ROOT variables.
if(POLICY CMP0144)
  cmake_policy(SET CMP0144 NEW)
endif()

# Install CODE|SCRIPT allow the use of generator expressions.
if(POLICY CMP0087)
  cmake_policy(SET CMP0087 NEW)
endif()

# Allow to specify language per file.
if(POLICY CMP0119)
  cmake_policy(SET CMP0119 NEW)
endif()

# Install DESTINATION paths are normalized.
if(POLICY CMP0177)
  cmake_policy(SET CMP0177 NEW)
endif()

include(CheckLibraryExists)
include(CheckIncludeFile)
include(CheckLanguage)
include(CheckSymbolExists)
include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)
include(CheckStructHasMember)
include(CMakeDependentOption)
include(CMakeParseArguments)
include(CMakePushCheckState)
# include(GNUInstallDirs)anager *wm = static_cast<wmWindowManager *>(bmain.wm.first);
    if (wm == nullptr) return;
Is it appropriate to motif and usefull? Any pros and cons.

Convert X/Open localization system to gettext. Convert localized to locale/po files.

Separate c code from header files. Ex.:
lib/Xm/* should be lib/Xm

What the difference between HeaderI.h and HeaderP.h (i mean I and P letters) all over the project?