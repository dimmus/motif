# $XConsortium: Text5.scr /main/6 1995/07/17 20:42:02 drk $
#
# Motif
#
# Copyright (c) 1987-2012, The Open Group. All rights reserved.
#
# These libraries and programs are free software; you can
# redistribute them and/or modify them under the terms of the GNU
# Lesser General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# These libraries and programs are distributed in the hope that
# they will be useful, but WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with these librararies and programs; if not, write
# to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
# Floor, Boston, MA 02110-1301 USA
#
#
# HISTORY
#

#  /* another test case for PIR 3175 - type returns first, then
#  text, it should grow correctly - I'll add a real test later */
#  #) Move the pointer into the Text window.  It should be sized
#     just large enough to fix the text in it.  Type some new text
#     including a few newlines.  The window should grow to
#     accommodate the text horizontally and vertically.
LocatePointer Text1 RTextChar 5
ClickMB Btn1
InputString "Here is some new\ntext that has\nbeen inserted."
CompareVisual Text1

#  #) Now backspace from the end of the text until the remaining text
#     is just one or two words on the first line.  The window should
#     shrink back to be only one row high.
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
ClickKey KBackSpace
CompareVisual Text1

#  C)
Continue

#  @) A single line text widget with the string 'Sample Text' will appear in
#     the test window. The text is red on a white background.
#  /* test case for PIR 3175 - should not need to do this step if fixed */
#     (If the text widget is not visible, resize the window larger to
#     expose it.)
#  /* end of test case for PIR 3175 */
#  #) Move the pointer into the Text window and press the return key.
#     It should have no effect.
LocatePointer Text1 RTextChar 5
ClickMB Btn1
ClickKey KReturn
CompareVisual Text1

#  C)
Continue

#  #) Move the pointer into the text widget and press ANY key. No matter
#     what key was pressed, an 'A' will appear.
LocatePointer Text1 RTextChar 5
ClickKey Kr
CompareVisual Text1

#  #) Press another key. This time a 'B' will appear in the text widget.
ClickKey Kp
CompareVisual Text1

#  #) Repeat this cycle and you will print out the entire alphabet.
InputString "this text will never appear"
CompareVisual Text1

#  C)
Continue

WindowRaise Shell1

#  #) Move the pointer into the test window, and again press return.
#     The text will change to the name of your server vendor.
LocatePointer Text1 RTextChar 5
ClickKey KReturn
CompareVisual Text1

#  C)
Continue

WindowRaise Shell1

#  /* test case for PIR 2230 */
#  #) Move the pointer into the text widget and press ANY key. No matter
#     what key was pressed, an 'A' followed by a very long series of
#     digits will appear.
LocatePointer Text1 RTextChar 5
ClickKey Kp
CompareVisual Text1

#  #) Press another key. This time a 'B' followed by a very long series
#     of digits will appear in the text widget.
ClickKey Kr
CompareVisual Text1

#  #) Repeat this cycle ten times and it will print out more letters
#  of the alphabet each
#  followed by a long digit series.
InputString "no show"
CompareVisual Text1

#  /* end of test case for PIR 2230 */

# C)
Continue

# @) The text widget has been changed to have a variable font.
# The number of columns for the Text widget has been set to 20.
# A dialog shell should appear with a scale for changing the
# width of the text widget. Also two pushbuttons \"Set String\"
# and \"Get Values\".
#
# #) Select the pushbutton labelled \"Get Values\". The number of
# columns and the width of the text widget should both be printed
# to the terminal window.
LocatePointer get_values
ClickMB Btn1

# #) Decrease the width until just the letter\"I\" is displayed.
# Select the button \"Set String\". This will change the character \"I\"
# to the character \"W\". Increase the width of the text widget until
# the entire character \"W\" can be displayed.
LocatePointer scale RScaleSlider
DragSliderValue Left 24

LocatePointer set_string
ClickMB Btn1

LocatePointer scale RScaleSlider
DragSliderValue Right 27

# #) Try typing other characters into the text widget and changing
# the width of the text widget. Verify that no errors occur.
# Change the width of the text widget to zero. Verify that no error occurs.
# /* end test case for CR 5380 */
LocatePointer Text1
InputString "new text"

LocatePointer scale RScaleSlider
DragSliderValue Right Max
DragSliderValue Left Min

# C)
Continue

# E)
Exit
