/* 
 * Motif
 *
 * Copyright (c) 1987-2012, The Open Group. All rights reserved.
 *
 * These libraries and programs are free software; you can
 * redistribute them and/or modify them under the terms of the GNU
 * Lesser General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * These libraries and programs are distributed in the hope that
 * they will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with these librararies and programs; if not, write
 * to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
 * Floor, Boston, MA 02110-1301 USA
*/ 
/* 
 * HISTORY
*/ 
/*
static char rcsid[] = "$XConsortium: ScrollList4.dat /main/6 1995/07/13 18:24:40 drk $"
*/
#) A Scrolled List contained in a Form with 9 items should appear. The font
   will be 9x15 (it will inherited from Form's XmNtextFontList resource),
   there will be no scrollbars at this time. 
#) This test will test the new Xm functions XmListItemPos(),
   XmListGetMatchPos(), and XmListGetSelectedPos(). 
C)
#) Two messages will be printed in the term window. The first will state
   that Item5 is found in Position 5. The second will state
   that Item0 cannot be found in the List. 
C)
#) Item1 will be added to the end of the List. This will cause a vertical
   scrollbar to appear. 
C)
#) Two messages will be printed in the term window. The first will state
   that Item1 was found in 2 slots ( slots 1, 10, ). The second message
   will state that there was no match for Item10 in the List 
C)
#) One message will be printed in the term window. It will state that
   no items were found to be selected in the List. 
#) Drag the Vertical scrollbar to the bottom. Another Item1 should
   now be visible. 
#) Select Item2, Item5, Item7, and Item1. 
C)
#) A message should be printed in the term window stating that 4 items
   were selected and they were Item2, Item5, Item7, and Item1. 
C)
#) The List should now have no itmes selected. 
#) Select Items3, Item5, and Item1. 
#) Move vertical slider all the way to the top and now select the 1st Item1.
#) A message stating which items are selected should be printed in the
   term window after each selection. This information is extracted via
   Callback structures. 
C)
#) SelectionPolicy has changed to EXTENDED_SELECT. 
#) Select Item2 through Item4. 
#) A message stating which items are selected should again be printed in
   the term window. 
C)
#) List should scroll downwards to have the Item2 be the first item visible. 
C)
#) All items in the List should now be visible. The selection mode should
be BROWSE_SELECT.
#) A PushButton labeled \"Push To Delete Selected Item\" should appear. It
should be attached to the top of the Form. The List should be attached on the
top to the bottom of the PushButton.
#) Select Item5 from the List.
#) Press the PushButton. This should delete Item5 from the List, and the
highlight should be on Item4.
#) Click the Down Key. Item6 should get both the highlight and the selection.
E)
