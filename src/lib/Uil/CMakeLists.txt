# UIL library sources
set(UIL_LIB_SRCS
    UilCmd.c
    UilDiags.c
    UilKeyTab.c
    UilLexAna.c
    UilLstLst.c
    UilP2Out.c
    UilP2Reslv.c
    UilSarComp.c
    UilSarExp.c
    UilSarInc.c
    UilSarMod.c
    UilSarObj.c
    UilSarProc.c
    UilSarVal.c
    UilSrcSrc.c
    UilSymNam.c
    UilSymStor.c
    UilData.c
    UilLstMac.c
    UilSemVal.c
    UilSemCSet.c
    UilDB.c
)

# UIL parser files are generated by WML tools
set(UIL_PARSER_C ${CMAKE_BINARY_DIR}/src/lib/Uil/Uil.c)
set(UIL_PARSER_H ${CMAKE_BINARY_DIR}/src/lib/Uil/Uil.h)

# UilLexPars.c is generated by the wml build process
# Create a custom command to copy it to the UIL build directory
# add_custom_command(
#     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.c
#     COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/src/bin/wml/UilLexPars.c ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.c
#     DEPENDS ${CMAKE_BINARY_DIR}/src/bin/wml/UilLexPars.c
#     COMMENT "Copying UilLexPars.c for UIL library build"
# )

# Uil.h is generated by the wml build process
# Create a custom command to copy it to the UIL build directory
# add_custom_command(
#     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Uil.h
#     COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/src/bin/wml/Uil.h ${CMAKE_CURRENT_BINARY_DIR}/Uil.h
#     DEPENDS ${CMAKE_BINARY_DIR}/src/bin/wml/Uil.h
#     COMMENT "Copying Uil.h for UIL library build"
# )

# Add the copied file to sources
set(UIL_LEXPARS_C ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.c)
list(APPEND UIL_LIB_SRCS ${UIL_LEXPARS_C} ${UIL_PARSER_C} ${UIL_PARSER_H})

# Generate message catalog header file
if(WITH_MESSAGE_CATALOG)
    add_custom_command(
        OUTPUT ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/include/uil
        COMMAND ${CMAKE_BINARY_DIR}/src/bin/utils/mkcatdefs
            ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
            ${CMAKE_SOURCE_DIR}/localized/C/msg/Uil.msg
            > /dev/null 2>&1
        DEPENDS ${CMAKE_BINARY_DIR}/src/bin/utils/mkcatdefs ${CMAKE_SOURCE_DIR}/localized/C/msg/Uil.msg
        COMMENT "Generating Uil message catalog header"
    )
else()
    add_custom_command(
        OUTPUT ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/include/uil
        COMMAND ${CMAKE_COMMAND} -E echo "/* UilMsgCatI.h - Generated stub */" > ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMAND ${CMAKE_COMMAND} -E echo "#ifndef _UilMsgCatI_h" >> ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMAND ${CMAKE_COMMAND} -E echo "#define _UilMsgCatI_h" >> ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMAND ${CMAKE_COMMAND} -E echo "#endif /* _UilMsgCatI_h */" >> ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h
        COMMENT "Creating Uil message catalog stub"
    )
endif()

# Create a custom target for the message catalog header
add_custom_target(uil_msgcat_header ALL DEPENDS ${CMAKE_BINARY_DIR}/include/uil/UilMsgCatI.h)

# Generate Uil.c and Uil.h from Uil.y using detected parser
if(USING_YACC OR USING_BYACC)
    # Use yacc/byacc - they generate y.tab.c and y.tab.h (direct processing like automake)
    add_custom_command(
        OUTPUT Uil.c Uil.h UilLexPars.h UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilSymGen.h" > UilSymGen.h'
        COMMAND ${BISON_EXECUTABLE} -d -o Uil.c ${CMAKE_SOURCE_DIR}/src/lib/Uil/Uil.y
        COMMAND ${CMAKE_COMMAND} -E remove UilSymGen.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink Uil.h UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink Uil.c UilLexPars.c
        DEPENDS ${CMAKE_SOURCE_DIR}/src/lib/Uil/Uil.y
        COMMENT "Generating Uil.c and Uil.h from Uil.y using ${BISON_EXECUTABLE} (direct processing)"
    )
    set(BISON_uil_OUTPUTS Uil.c Uil.h UilLexPars.h UilLexPars.c)
else()
    # Use bison - generate in binary directory (direct processing like automake)
    add_custom_command(
        OUTPUT Uil.c Uil.h UilLexPars.h UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilSymGen.h" > UilSymGen.h'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilLexPars.h" > UilLexPars.h'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilLexPars.c" > UilLexPars.c'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${BISON_EXECUTABLE} -d -o Uil.c ${CMAKE_CURRENT_SOURCE_DIR}/Uil.y
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilSymGen.h
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_COMMAND} -E create_symlink Uil.h UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_COMMAND} -E create_symlink Uil.c UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR}/Uil.h UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR}/Uil.c UilLexPars.c
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Uil.y
        COMMENT "Generating Uil.c and Uil.h from Uil.y using bison (direct processing)"
    )
    set(BISON_uil_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/Uil.c ${CMAKE_CURRENT_BINARY_DIR}/Uil.h ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.h ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.c)
endif()

# Create a target for the UIL parser generation
add_custom_target(uil_parser_target
    DEPENDS ${BISON_uil_OUTPUTS}
    COMMENT "UIL parser generation target"
)

# Create libUil library
add_library(Uil ${UIL_LIB_SRCS})

# Ensure message catalog header is generated before building this target
add_dependencies(Uil uil_msgcat_header)

# Ensure all UIL files are generated before building UIL
add_dependencies(Uil wml_generated_files uil_parser_target)

# Ensure Uil.h is copied before building UIL
# add_dependencies(Uil ${CMAKE_BINARY_DIR}/src/bin/wml/Uil.h)

target_include_directories(Uil PRIVATE
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/src/lib
    ${CMAKE_SOURCE_DIR}/src/lib/Uil
    ${CMAKE_SOURCE_DIR}/src/bin/uil
    ${CMAKE_SOURCE_DIR}/src/bin/wml
    ${CMAKE_BINARY_DIR}/include
    ${CMAKE_BINARY_DIR}/include/uil
    ${CMAKE_BINARY_DIR}/src/lib
    ${CMAKE_BINARY_DIR}/src/lib/Uil
    ${CMAKE_BINARY_DIR}/src/bin/uil
    ${CMAKE_BINARY_DIR}/src/bin/wml
    ${X_INCLUDE_DIRS}
)

target_compile_definitions(Uil PRIVATE
    INCDIR="${CMAKE_INSTALL_INCLUDEDIR}/X11"
    LIBDIR="${CMAKE_INSTALL_LIBDIR}/X11"
)

if(ENABLE_UIL_DEBUG)
    target_compile_definitions(Uil PRIVATE XM_UIL_DEBUG)
endif()

target_link_libraries(Uil
    Mrm
    Xm
    ${X_LIBRARIES}
    m
    pthread
)

# Add system includes
target_compile_options(Uil PRIVATE
    -include ${CMAKE_SOURCE_DIR}/include/motif_system.h
)

# Install library
install(TARGETS Uil
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

# Install headers
install(FILES
    ${CMAKE_BINARY_DIR}/src/lib/Uil/Uil.h
    UilSymGl.h
    UilSymDef.h
    UilDef.h
    UilAPI.h
    UilDBDef.h
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/uil
)
