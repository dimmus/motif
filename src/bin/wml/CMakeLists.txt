# CMakeLists.txt for tools/wml
# Widget MetaLanguage (WML) facility for generating UIL compiler language description

cmake_minimum_required(VERSION 3.16)

# Find required packages
find_package(PkgConfig REQUIRED)
find_package(BISON REQUIRED)
find_package(FLEX REQUIRED)

# Use global YACC/LEX detection from main CMakeLists.txt
set(BISON_EXECUTABLE ${MOTIF_BISON_EXECUTABLE})
set(FLEX_EXECUTABLE ${MOTIF_FLEX_EXECUTABLE})
set(FLEX_LIBRARY ${MOTIF_FLEX_LIBRARY})
set(USING_YACC ${MOTIF_USING_YACC})
set(USING_BYACC ${MOTIF_USING_BYACC})
set(USING_LEX ${MOTIF_USING_LEX})

# Set up bison/flex variables for compatibility
set(BISON_TARGET wmlparse)
set(FLEX_TARGET wmllex)

# Find X11 and Motif libraries
pkg_check_modules(X11 REQUIRED x11)
pkg_check_modules(XT REQUIRED xt)
pkg_check_modules(XMU REQUIRED xmu)

# Find Motif library (libXm)
find_library(XM_LIBRARY Xm PATHS ${CMAKE_SOURCE_DIR}/src/lib/Xm)
if(NOT XM_LIBRARY)
    message(FATAL_ERROR "libXm not found. Please build the Motif library first.")
endif()

# Include directories
include_directories(
    ${CMAKE_SOURCE_DIR}/src/lib
    ${CMAKE_SOURCE_DIR}/include
    ${X11_INCLUDE_DIRS}
    ${XT_INCLUDE_DIRS}
    ${XMU_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# WML target files (generated by WML processing)
set(WML_TARGETS
    UilConst.h
    UilKeyTab.h
    UilSymArTa.h
    UilSymArTy.h
    UilSymCSet.h
    UilSymCtl.h
    UilSymEnum.h
    UilSymGen.h
    UilSymNam.h
    UilSymRArg.h
    UilSymReas.h
    UilTokName.h
    UilUrmClas.h
    UilSymChCl.h
    UilSymChTa.h
)

# Generate wmllex.c from wmllex.l using flex
add_custom_command(
    OUTPUT wmllex.c
    COMMAND ${FLEX_EXECUTABLE} -o wmllex.c ${CMAKE_CURRENT_SOURCE_DIR}/wmllex.l
    DEPENDS wmllex.l
    COMMENT "Generating wmllex.c from wmllex.l"
)

# Add feature test macros to wmllex.c
add_custom_command(
    OUTPUT wmllex_processed.c
    COMMAND ${CMAKE_COMMAND} -E copy wmllex.c wmllex_processed.c
    COMMAND ${CMAKE_COMMAND} -E echo "#include <stdio.h>" > temp
    COMMAND ${CMAKE_COMMAND} -E echo "#include <unistd.h>" >> temp
    COMMAND ${CMAKE_COMMAND} -E cat wmllex_processed.c >> temp
    COMMAND ${CMAKE_COMMAND} -E rename temp wmllex_processed.c
    DEPENDS wmllex.c
    COMMENT "Adding feature test macros to wmllex.c"
)

# Generate wmluiltok.c from wmluiltok.l using flex
add_custom_command(
    OUTPUT wmluiltok.c
    COMMAND ${FLEX_EXECUTABLE} -o wmluiltok.c ${CMAKE_CURRENT_SOURCE_DIR}/wmluiltok.l
    DEPENDS wmluiltok.l
    COMMENT "Generating wmluiltok.c from wmluiltok.l"
)

# Add feature test macros to wmluiltok.c
add_custom_command(
    OUTPUT wmluiltok_processed.c
    COMMAND ${CMAKE_COMMAND} -E copy wmluiltok.c wmluiltok_processed.c
    COMMAND ${CMAKE_COMMAND} -E echo "#include <stdio.h>" > temp
    COMMAND ${CMAKE_COMMAND} -E echo "#include <unistd.h>" >> temp
    COMMAND ${CMAKE_COMMAND} -E cat wmluiltok_processed.c >> temp
    COMMAND ${CMAKE_COMMAND} -E rename temp wmluiltok_processed.c
    DEPENDS wmluiltok.c
    COMMENT "Adding feature test macros to wmluiltok.c"
)

# Generate wmlparse.c and wmlparse.h from wmlparse.y using detected parser
if(USING_YACC OR USING_BYACC)
    # Use yacc/byacc - they generate y.tab.c and y.tab.h
    add_custom_command(
        OUTPUT wmlparse.c wmlparse.h
        COMMAND ${BISON_EXECUTABLE} -d -o wmlparse.c ${CMAKE_CURRENT_SOURCE_DIR}/wmlparse.y
        DEPENDS wmlparse.y
        COMMENT "Generating wmlparse.c and wmlparse.h from wmlparse.y using ${BISON_EXECUTABLE}"
    )
    set(BISON_wmlparse_OUTPUTS wmlparse.c wmlparse.h)
else()
    # Use bison - generate in binary directory
    add_custom_command(
        OUTPUT wmlparse.c wmlparse.h
        COMMAND ${BISON_EXECUTABLE} -d -o ${CMAKE_CURRENT_BINARY_DIR}/wmlparse.c ${CMAKE_CURRENT_SOURCE_DIR}/wmlparse.y
        DEPENDS wmlparse.y wmllex.c
        COMMENT "Generating wmlparse.c and wmlparse.h from wmlparse.y using bison"
    )
    
    # Bison already includes lexer code, so no need to combine files
    set(BISON_wmlparse_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/wmlparse.c ${CMAKE_CURRENT_BINARY_DIR}/wmlparse.h)
endif()

# Create a target for the parser generation
add_custom_target(wmlparse_target
    DEPENDS ${BISON_wmlparse_OUTPUTS}
    COMMENT "Parser generation target"
)

# Generate Uil.c and Uil.h from Uil.y using detected parser
if(USING_YACC OR USING_BYACC)
    # Use yacc/byacc - they generate y.tab.c and y.tab.h
    add_custom_command(
        OUTPUT Uil.c Uil.h UilLexPars.h UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilSymGen.h" > UilSymGen.h'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} cpp -I${CMAKE_SOURCE_DIR}/src/bin/uil -I${CMAKE_SOURCE_DIR}/include -I${CMAKE_SOURCE_DIR}/src/lib -I${CMAKE_SOURCE_DIR}/src/lib/Uil -I${CMAKE_CURRENT_SOURCE_DIR} -P ${CMAKE_SOURCE_DIR}/src/bin/uil/Uil.y Uil_processed.y
        COMMAND ${BISON_EXECUTABLE} -d -o Uil.c Uil_processed.y
        COMMAND ${CMAKE_COMMAND} -E remove Uil_processed.y
        COMMAND ${CMAKE_COMMAND} -E remove UilSymGen.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink Uil.h UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink Uil.c UilLexPars.c
        DEPENDS ${CMAKE_SOURCE_DIR}/src/bin/uil/Uil.y
        COMMENT "Generating Uil.c and Uil.h from Uil.y using ${BISON_EXECUTABLE}"
    )
    set(BISON_uil_OUTPUTS Uil.c Uil.h UilLexPars.h UilLexPars.c)
else()
    # Use bison - generate in binary directory
    add_custom_command(
        OUTPUT Uil.c Uil.h UilLexPars.h UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilSymGen.h" > UilSymGen.h'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilLexPars.h" > UilLexPars.h'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} bash -c 'echo "// Placeholder for UilLexPars.c" > UilLexPars.c'
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_SOURCE_DIR} cpp -DNO_STD_HEADERS -DNO_X11_HEADERS -DNO_MRM_HEADERS -I${CMAKE_SOURCE_DIR}/src/bin/uil -I${CMAKE_SOURCE_DIR}/include -I${CMAKE_SOURCE_DIR}/src/lib -I${CMAKE_SOURCE_DIR}/src/lib/Uil -I${CMAKE_CURRENT_SOURCE_DIR} -P ${CMAKE_SOURCE_DIR}/src/bin/uil/Uil.y Uil_processed.y
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${BISON_EXECUTABLE} -d -o Uil.c ${CMAKE_CURRENT_SOURCE_DIR}/Uil_processed.y
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR}/tools/cmake/scripts/fix_yystype.sh ${CMAKE_CURRENT_BINARY_DIR}/Uil.h
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/Uil_processed.y
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilSymGen.h
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_COMMAND} -E create_symlink Uil.h UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_COMMAND} -E create_symlink Uil.c UilLexPars.c
        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR}/Uil.h ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.h
        COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR}/Uil.c ${CMAKE_CURRENT_SOURCE_DIR}/UilLexPars.c
        DEPENDS ${CMAKE_SOURCE_DIR}/src/bin/uil/Uil.y
        COMMENT "Generating Uil.c and Uil.h from Uil.y using bison"
    )
    set(BISON_uil_OUTPUTS ${CMAKE_CURRENT_BINARY_DIR}/Uil.c ${CMAKE_CURRENT_BINARY_DIR}/Uil.h ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.h ${CMAKE_CURRENT_BINARY_DIR}/UilLexPars.c)
endif()

# Create a target for the UIL parser generation
add_custom_target(uil_parser_target
    DEPENDS ${BISON_uil_OUTPUTS}
    COMMENT "UIL parser generation target"
)

# Create wmlparse.h in source directory (for compatibility)
if(USING_YACC OR USING_BYACC)
    # For yacc/byacc, wmlparse.h is already created in the source directory
    add_custom_target(wmlparse_h_target
        DEPENDS wmlparse.h
        COMMENT "wmlparse.h target"
    )
    set(WMLPARSE_H_TARGET wmlparse_h_target)
else()
    # For bison, copy from binary directory
    add_custom_command(
        OUTPUT wmlparse.h
        COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/wmlparse.h wmlparse.h
        DEPENDS wmlparse_target
        COMMENT "Creating wmlparse.h in source directory"
    )
    add_custom_target(wmlparse_h_target
        DEPENDS wmlparse.h
        COMMENT "wmlparse.h target"
    )
    set(WMLPARSE_H_TARGET wmlparse_h_target)
endif()

# Create a target for the symlinks (now handled by parser generation)
add_custom_target(uil_lexpars_symlinks
    DEPENDS uil_parser_target
    COMMENT "UilLexPars symlinks target"
)

# Build libwml static library
add_library(libwml STATIC
    wmloutkey.c
    wmlouth.c
    wmloutmm.c
    wmloutp1.c
    wmlresolve.c
    wmlsynbld.c
    wmlutils.c
)

# Add include directory for generated headers
target_include_directories(libwml PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

# Add the generated parser files to the library
if(USING_YACC OR USING_BYACC)
    target_sources(libwml PRIVATE wmlparse.c)
else()
    # For bison, use the parser file directly (it already includes lexer code)
    target_sources(libwml PRIVATE wmlparse.c)
endif()

# Set properties for the library
set_target_properties(libwml PROPERTIES
    OUTPUT_NAME wml
)

# Link bison-generated files to the library
# Dependencies are handled in the main dependency section below

# Build wmluiltok executable
add_executable(wmluiltok wmluiltok_processed.c)

# Link with flex library if available (equivalent to LEXLIB from configure.ac)
if(FLEX_LIBRARY)
    target_link_libraries(wmluiltok ${FLEX_LIBRARY})
endif()

# Build wml executable
add_executable(wml wml.c)
target_link_libraries(wml libwml)

# Build wmldbcreate executable
add_executable(wmldbcreate wmldbcreate.c)
target_link_libraries(wmldbcreate 
    ${XM_LIBRARY}
    ${X11_LIBRARIES}
    ${XT_LIBRARIES}
    ${XMU_LIBRARIES}
)

# Ensure UIL parser files are generated before building wmldbcreate
add_dependencies(wmldbcreate uil_parser_target uil_lexpars_symlinks)

# Add include directory for generated headers
target_include_directories(wmldbcreate PRIVATE 
    ${CMAKE_CURRENT_SOURCE_DIR} 
    ${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_SOURCE_DIR}/src/bin/uil
    ${CMAKE_SOURCE_DIR}/src/lib/Uil
)

# Custom command to generate WML target files
add_custom_command(
    OUTPUT ${WML_TARGETS}
    COMMAND ${CMAKE_COMMAND} -E remove ${WML_TARGETS} wml.report wml-uil.mm
    COMMAND $<TARGET_FILE:wmluiltok> < ${CMAKE_SOURCE_DIR}/src/bin/uil/Uil.y > tokens.dat
    COMMAND ${CMAKE_COMMAND} -E remove wml-uil.mm
    COMMAND $<TARGET_FILE:wml> ${CMAKE_CURRENT_SOURCE_DIR}/motif.wml
    COMMAND ${CMAKE_COMMAND} -E remove tokens.dat
    DEPENDS wmluiltok wml motif.wml
    COMMENT "Generating WML target files"
)

# Create a target for WML generated files
add_custom_target(wml_generated_files
    DEPENDS ${WML_TARGETS}
    COMMENT "WML generated files target"
)

# Custom command to generate motif.wmd database
add_custom_command(
    OUTPUT motif.wmd
    COMMAND $<TARGET_FILE:wmldbcreate> -o motif.wmd
    DEPENDS wmldbcreate ${WML_TARGETS}
    COMMENT "Generating motif.wmd database"
)

# Custom target for all WML processing
add_custom_target(wml_all
    DEPENDS ${WML_TARGETS} motif.wmd
    COMMENT "Building all WML generated files"
)

# Set up dependencies
add_dependencies(wml wmlparse_target ${WMLPARSE_H_TARGET})
add_dependencies(wmldbcreate wml_generated_files)
add_dependencies(libwml wmlparse_target ${WMLPARSE_H_TARGET})

# Install headers
install(FILES UilDBDef.h
    DESTINATION include/uil
)

# Install programs
install(TARGETS wml wmluiltok wmldbcreate
    RUNTIME DESTINATION bin
)

# Install library
install(TARGETS libwml
    ARCHIVE DESTINATION lib
)

# Clean up generated files
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY
    ADDITIONAL_CLEAN_FILES
    "${WML_TARGETS};motif.wmd;wml.report;lex.yy.c;libwml.a;wml;*.mm;*.sdml;*.txt;wmlparse.c;wmlparse.h;wmluiltok;wmllex.c;tokens.dat;DONE;wmluiltok.c;Uil.c;Uil.h;wml.report;UilLexPars.h;UilLexPars.c;wmllex_processed.c;wmluiltok_processed.c"
)

# Add custom target for clean
add_custom_target(wml_clean
    COMMAND ${CMAKE_COMMAND} -E remove
        ${WML_TARGETS}
        motif.wmd
        wml.report
        lex.yy.c
        libwml.a
        wml
        "*.mm"
        "*.sdml" 
        "*.txt"
        wmlparse.c
        wmlparse.h
        wmluiltok
        wmllex.c
        tokens.dat
        DONE
        wmluiltok.c
        Uil.c
        Uil.h
        wml.report
        UilLexPars.h
        UilLexPars.c
        wmllex_processed.c
        wmluiltok_processed.c
    COMMENT "Cleaning WML generated files"
)
